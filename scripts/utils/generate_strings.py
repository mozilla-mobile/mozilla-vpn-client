#! /usr/bin/env python3
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

import os
import yaml
import argparse


def stop(string_id):
    exit(
        f"Each key must be a string or a list with 1 or more items. Fix string ID `{string_id}`"
    )


def pascalize(string):
    output = ""
    for chunk in string.split("_"):
        output += chunk[0].upper()
        output += chunk[1:]
    return output


# special loader with duplicate key checking
# From: https://gist.github.com/pypt/94d747fe5180851196eb
class UniqueKeyLoader(yaml.SafeLoader):
    def construct_mapping(self, node, deep=False):
        mapping = []
        for key_node, value_node in node.value:
            key = self.construct_object(key_node, deep=deep)
            if key in mapping:
                print(f"Warning!! {key} is duplicated!")
            assert key not in mapping
            mapping.append(key)
        return super().construct_mapping(node, deep)


def parseTranslationStrings(yamlfile):
    if not os.path.isfile(yamlfile):
        exit(f"Unable to find {yamlfile}")

    yaml_strings = {}
    with open(yamlfile, "r", encoding="utf-8") as yaml_file:
        # Enforce a new line at the end of the file
        last_line = yaml_file.readlines()[-1]
        if last_line == last_line.rstrip():
            exit("The yaml file must have an empty line at the end")

        # Reset position after reading the whole content
        yaml_file.seek(0)
        yaml_content = yaml.load(yaml_file, UniqueKeyLoader)
        if yaml_content is None:
            return yaml_strings

        if type(yaml_content) is not dict:
            exit(f"The {yamlfile} file must contain collections only")

        for category in yaml_content:
            for key in yaml_content[category]:
                string_id = f"vpn.{category}.{key}"
                obj = yaml_content[category][key]
                value = []
                comments = []

                if type(obj) is str:
                    if len(obj) == 0:
                        stop(string_id)
                    value = [obj]

                elif type(obj) is dict:
                    if not ("value" in obj):
                        exit(
                            f"The key {string_id} must contain a `value` string or an array of strings"
                        )

                    if type(obj["value"]) is str:
                        value = [obj["value"]]

                    elif type(obj["value"]) is list:
                        for x in range(0, len(obj["value"])):
                            value.append(obj["value"][x])

                    else:
                        exit(
                            f"The value of {string_id} must be a string or an array of strings"
                        )

                    if "comment" in obj:
                        if type(obj["comment"]) is str:
                            comments = [obj["comment"]]

                        elif type(obj["comment"]) is list:
                            for x in range(0, len(obj["comment"])):
                                comments.append(obj["comment"][x])

                        else:
                            exit(
                                f"The comment of {string_id} must be a string or an array of strings"
                            )

                    if len(value) == 0:
                        stop(string_id)

                else:
                    stop(string_id)

                yaml_strings[pascalize(f"{category}_{key}")] = {
                    "string_id": string_id,
                    "value": value,
                    "comments": comments,
                }

        return yaml_strings


# Render a dictionary of strings into the l18nstrings module.
def generateStrings(strings, outdir):
    os.makedirs(outdir, exist_ok=True)
    with open(os.path.join(outdir, "l18nstrings.h"), "w", encoding="utf-8") as output:
        output.write(
            """/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

// AUTOGENERATED! DO NOT EDIT!!

#ifndef L18NSTRINGS_H
#define L18NSTRINGS_H

#include <QQmlPropertyMap>

class L18nStrings final : public QQmlPropertyMap {
  Q_OBJECT
  Q_DISABLE_COPY_MOVE(L18nStrings)

 public:
  enum String {
    Empty,
"""
        )

        for key in strings:
            output.write(f"    {key},\n")

        output.write(
            """    __Last,
  };

  static L18nStrings* instance();
  static void initialize();

  explicit L18nStrings(QObject* parent);
  ~L18nStrings() = default;

  void retranslate();

  const char* id(L18nStrings::String) const;

  QString t(String) const;

 private:
  static const char* const _ids[];
};

#endif  // L18NSTRINGS_H
"""
        )

    with open(
        os.path.join(outdir, "l18nstrings_p.cpp"), "w", encoding="utf-8"
    ) as output:
        output.write(
            """/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

// AUTOGENERATED! DO NOT EDIT!!

#include "l18nstrings.h"

// static
const char* const L18nStrings::_ids[] = {
    // The first ID is for the empty string.
    "",

"""
        )

        def serialize(string):
            ret = "\\n".join(string)
            return ret.replace('"', '\\"')

        for key, data in strings.items():
            output.write(f"    //% \"{serialize(data['value'])}\"\n")
            for comment in data["comments"]:
                output.write(f"    //: {comment}\n")
            output.write(f"    QT_TRID_NOOP(\"{data['string_id']}\"),\n\n")

        # This is done to make windows compiler happy
        if len(strings) == 0:
            output.write(f'    "vpn.dummy.ignore",\n\n')

        output.write(
            """
};

"""
        )

        # Generate the retranslate() method.
        output.write("void L18nStrings::retranslate() {\n")
        for key in strings:
            output.write(f'    insert("{key}", qtTrId(_ids[{key}]));\n')
        output.write("}")


if __name__ == "__main__":
    # Parse arguments to locate the input and output files.
    parser = argparse.ArgumentParser(
        description="Generate internationalization strings database from a YAML source"
    )
    parser.add_argument(
        "source",
        metavar="SOURCE",
        type=str,
        action="store",
        nargs="?",
        help="YAML strings file to process",
    )
    parser.add_argument(
        "-o",
        "--output",
        metavar="DIR",
        type=str,
        action="store",
        help="Output directory for generated files",
    )
    args = parser.parse_args()

    # If no source was provided, find it relative to this script file.
    if args.source is None:
        rootpath = os.path.abspath(
            os.path.join(os.path.dirname(__file__), os.pardir, os.pardir)
        )
        args.source = os.path.join(rootpath, "translations", "strings.yaml")

    # If no output directory was provided, use the current directory.
    if args.output is None:
        args.output = os.getcwd()

    # Parse the inputs for their sweet juicy strings.
    strings = parseTranslationStrings(args.source)

    # Render the strings into generated content.
    generateStrings(strings, args.output)

#!/usr/bin/env bash

# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

set -eu

APP_DIR="$2/Mozilla VPN.app"
LOG_DIR=/var/log/mozillavpn

OSX_MAJOR_VER=$(sw_vers -productVersion | cut -d. -f1)

CODESIGN_APP_IDENTIFIER="@BUILD_OSX_APP_IDENTIFIER@"
CODESIGN_TEAM_IDENTIFIER="@BUILD_VPN_DEVELOPMENT_TEAM@"

DAEMON_PLIST_PATH="/Library/LaunchDaemons/${CODESIGN_APP_IDENTIFIER}.daemon.plist"
DAEMON_HELPER_TOOL="/Library/PrivilegedHelperTools/${CODESIGN_APP_IDENTIFIER}.daemon"

## These OIDs check that the app bundle was signed with a valid
# Developer ID Application certificate issued by Apple.
APPLE_OID_EXT_APP_CODESIGNING="1.2.840.113635.100.6.1.13"
APPLE_OID_EXT_CA_INTERMEDIATE="1.2.840.113635.100.6.2.6"

# For local development, use this instead
#   Apple developer program: 1.2.840.113635.6.1.12
#   Apple WWDR intermediate: 1.2.840.113635.6.2.1
#APPLE_OID_EXT_APP_CODESIGNING="1.2.840.113635.100.6.1.12"
#APPLE_OID_EXT_CA_INTERMEDIATE="1.2.840.113635.100.6.2.1"

mkdir -p $LOG_DIR
chmod 755 $LOG_DIR
exec 2>&1 > $LOG_DIR/postinstall.log

echo "Running postinstall at $(date)"
echo "Installing Mozilla VPN to ${APP_DIR}"

pkill -U "${USER}" -x "Mozilla VPN" || echo "Unable to kill GUI, not running?"
sleep 1

## Before MacOS 13, take extra care to prevent tampering with the app.
echo "Restrict App file permissions..."
chown -R root "$APP_DIR"
chmod -R go-w "$APP_DIR"
if [ -n "$(find "$APP_DIR" -type l)" ]; then
  echo "Symlinks detected in application directory! Aborting."
  rm -rf "$APP_DIR"
  exit 1
fi

echo "Validate application codesign..."
CODESIGN_REQS="anchor apple generic and identifier ${CODESIGN_APP_IDENTIFIER}"
CODESIGN_REQS+=" and certificate 1[field.${APPLE_OID_EXT_CA_INTERMEDIATE}] /* exists */"
CODESIGN_REQS+=" and certificate leaf[field.${APPLE_OID_EXT_APP_CODESIGNING}] /* exists */"
CODESIGN_REQS+=" and certificate leaf[subject.OU] = \"${CODESIGN_TEAM_IDENTIFIER}\""
if ! codesign -v --verbose=4 -R="${CODESIGN_REQS}" "$APP_DIR"; then
  echo "Codesign failed! Aborting."
  rm -rf "$APP_DIR"
  exit 1
fi
echo "Codesign successful!"

# Unload the daemon
UPDATING=
if launchctl bootout system/${CODESIGN_APP_IDENTIFIER}.service 2>/dev/null; then
  echo "Update detected (SMAppService)"
  UPDATING=1
elif launchctl bootout system/${CODESIGN_APP_IDENTIFIER}.daemon 2>/dev/null; then
  echo "Update detected (legacy daemon)"
  UPDATING=1
fi
if [ -f "$DAEMON_PLIST_PATH" ]; then
  echo "Removing legacy daemon plist"
  rm -f ${DAEMON_PLIST_PATH}
fi

# For legacy MacOS versions - a privileged helper tool is required to run
# the daemon. This isn't necessary for MacOS 13 and later, which makes use
# of the SMAppService interface.
if [ ${OSX_MAJOR_VER} -lt 13 ]; then
  echo "Installing privileged helper tool"
  touch $DAEMON_HELPER_TOOL
  chown root:wheel $DAEMON_HELPER_TOOL
  chmod 744 $DAEMON_HELPER_TOOL
  cat << EOF > $DAEMON_HELPER_TOOL
#!/usr/bin/env bash
CODESIGN_REQS="anchor apple generic and identifier ${CODESIGN_APP_IDENTIFIER}"
CODESIGN_REQS+=" and certificate 1[field.${APPLE_OID_EXT_CA_INTERMEDIATE}] /* exists */"
CODESIGN_REQS+=" and certificate leaf[field.${APPLE_OID_EXT_APP_CODESIGNING}] /* exists */"
CODESIGN_REQS+=" and certificate leaf[subject.OU] = \"${CODESIGN_TEAM_IDENTIFIER}\""
if ! codesign -v --verbose=4 -R="\${CODESIGN_REQS}" "${APP_DIR}"; then
  echo "Codesign failed! Aborting."
  exit 1
fi

"${APP_DIR}/Contents/MacOS/Mozilla VPN" "macosdaemon"
EOF
  chmod u-w $DAEMON_HELPER_TOOL

  # Modify the SMAppService plist for use as a legacy daemon.
  echo "Loading the Daemon at $DAEMON_PLIST_PATH"
  plutil -replace ProgramArguments -json "[\"$DAEMON_HELPER_TOOL\"]" -o $DAEMON_PLIST_PATH \
    "${APP_DIR}/Contents/Library/LaunchDaemons/${CODESIGN_APP_IDENTIFIER}.service.plist"
  plutil -replace Label -string ${CODESIGN_APP_IDENTIFIER}.daemon $DAEMON_PLIST_PATH
  launchctl load -w $DAEMON_PLIST_PATH
fi

if [ -f "${APP_DIR}/Contents/Resources/utils/mozillavpn.json" ]; then
  echo "Install the firefox native messaging manifest"
  mkdir -p "/Library/Application Support/Mozilla/NativeMessagingHosts"
  cp -f "${APP_DIR}/Contents/Resources/utils/mozillavpn.json" "/Library/Application Support/Mozilla/NativeMessagingHosts/mozillavpn.json"

  echo "Install the chrome native messaging manifest"
  mkdir -p "/Library/Google/Chrome/NativeMessagingHosts"
  cp -f "${APP_DIR}/Contents/Resources/utils/mozillavpn.json" "/Library/Google/Chrome/NativeMessagingHosts/mozillavpn.json"

  echo "Install the chromium native messaging manifest"
  mkdir -p "/Library/Application Support/Chromium/NativeMessagingHosts"
  cp -f "${APP_DIR}/Contents/Resources/utils/mozillavpn.json" "/Library/Application Support/Chromium/NativeMessagingHosts/mozillavpn.json"
fi

echo "Install Complete Run the app"
if [ "$UPDATING" ]; then
  open -a "$APP_DIR" --args ui --updated
else
  open -a "$APP_DIR"
fi
exit 0

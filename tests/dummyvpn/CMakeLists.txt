# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

# For CMake versions prior to 3.19, we may need to perform manual
# finalization in order to pick up QML dependencies when built
# statically.
qt_add_executable(dummyvpn MANUAL_FINALIZATION)
include(ExternalProject)
target_link_libraries(dummyvpn PRIVATE
    Qt6::Quick
    Qt6::Test
    Qt6::WebSockets
    Qt6::Widgets
)

if(NOT ${CMAKE_SYSTEM_NAME} STREQUAL "Emscripten" 
   AND NOT ${CMAKE_SYSTEM_NAME} STREQUAL "Android" )
    target_link_libraries(dummyvpn PRIVATE
        Qt6::NetworkAuth
    )
endif()

target_link_libraries(dummyvpn PRIVATE
    mz_webextension
    shared-sources
    mozillavpn-sources
    mozillavpn-uiplugin
    lottie
    nebula
    translations
    qtglean
)

target_sources(dummyvpn PRIVATE
    ${CMAKE_SOURCE_DIR}/src/platforms/dummy/dummycontroller.cpp
    ${CMAKE_SOURCE_DIR}/src/platforms/dummy/dummycontroller.h
)

# VPN statically links with Qt on Windows. When Qt is statically linked, the
# built-in plugins are provided by libraries that are generated by the
# qmlimportscanner tool. However, this tool has a limitation: it scans for
# built-in plugins only in QRC files that are located in the target's directory tree.
# dummyvpn/qml/qt6winhack.qml contains the necessary plugin imports.
if(WIN32)
    target_sources(dummyvpn PRIVATE ${CMAKE_SOURCE_DIR}/tests/dummyvpn/qml/qt6winhack.qrc)
endif()

target_compile_definitions(dummyvpn PRIVATE MZ_DEBUG)

# MZ_DUMMY is a separate platform for dummyvpn.
# Use #ifdef _WIN32 instead of MZ_WINDOWS in dummyvpn for conflicts in Windows-specific code.
target_compile_definitions(dummyvpn PRIVATE MZ_DUMMY)

# Build the addons for functional testing.
get_filename_component(QT6_PREFIX_PATH ${Qt6_DIR}/.. REALPATH)
ExternalProject_Add(functional_test_addons
    SOURCE_DIR ${CMAKE_SOURCE_DIR}/tests/functional/addons
    BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR}/addons
    CMAKE_CACHE_ARGS -DCMAKE_PREFIX_PATH:PATH=${QT6_PREFIX_PATH}
    INSTALL_COMMAND ""
)
add_dependencies(dummyvpn functional_test_addons)

qt_finalize_target(dummyvpn)

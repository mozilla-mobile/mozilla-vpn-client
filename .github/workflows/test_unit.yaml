name: Unit Tests
on:
  push:
    branches:
      - main
      - 'releases/**'
  pull_request:
    branches:
      - main
      - 'releases/**'

# Restrict tests to the most recent commit.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  linux-unit-tests:
    runs-on: ubuntu-22.04
    name: Run Unit tests on Linux
    steps:
      - name: Clone repository
        uses: actions/checkout@v3
        with:
          submodules: 'true'

      - name: Install dependences
        run: |
          sudo apt-get update
          sudo apt-get install -y $(./scripts/linux/getdeps.py -a linux/debian/control)
          pip3 install -r requirements.txt

      - name: Cache grcov
        id: cache-grcov
        uses: actions/cache@v3
        with:
          path: grcov-build/
          key: ${{runner.os}}-grcov-v0.8.13

      - name: Install Grcov
        if: steps.cache-grcov.outputs.cache-hit != 'true'
        shell: bash
        run: |
          cargo install grcov --root ${{github.workspace}}/grcov-build --version 0.8.13

      - name: Building tests
        shell: bash
        run: |
          mkdir -p build
          cmake -S . -B $(pwd)/build \
            -DCMAKE_CXX_FLAGS=--coverage -DCMAKE_EXE_LINKER_FLAGS=--coverage
          cmake --build $(pwd)/build --target build_tests -j$(nproc)

      - name: Running tests
        shell: bash
        working-directory: ./build
        run: |
          export PATH=${{github.workspace}}/grcov-build/bin:$PATH
          ctest --output-on-failure

          grcov $(pwd)/tests/auth/CMakeFiles/auth_tests.dir -s ${{github.workspace}} \
              -t lcov --branch --ignore-not-existing > ${{github.workspace}}/auth_lcov.info

          grcov $(pwd)/tests/nativemessaging/CMakeFiles/nativemessaging_tests.dir -s ${{github.workspace}} \
              -t lcov --branch --ignore-not-existing > ${{github.workspace}}/nativemessaging_lcov.info

          grcov $(pwd)/tests/qml/CMakeFiles/qml_tests.dir -s ${{github.workspace}} \
              -t lcov --branch --ignore-not-existing > ${{github.workspace}}/qml_lcov.info

          grcov $(pwd)/tests/unit/CMakeFiles/unit_tests.dir -s ${{github.workspace}} \
              -t lcov --branch --ignore-not-existing > ${{github.workspace}}/unit_lcov.info

      - name: Upload coverage for linux unit tests to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: .
          flags: linux_unit_tests
          name: codecov-poc
          files: auth_lcov.info,nativemessaging_lcov.info,qml_lcov.info,unit_lcov.info
          verbose: true

  macos-unit-tests:
    runs-on: macos-latest
    name: Run Unit tests on MacOS

    steps:
      - name: Clone repository
        uses: actions/checkout@v3
        with:
          submodules: 'true'

      - name: Install dependencies
        shell: bash
        run: |
          pip3 install -r requirements.txt
          brew install ninja

      - name: Install Qt6
        shell: bash
        run: |
          auth_header="$(git config --local --get http.https://github.com/.extraheader)"
          git clone https://github.com/mozilla-mobile/qt_static_macos --depth 1
          cd qt_static_macos
          cat qt6* > qt_static.tar.gz
          tar xf qt_static.tar.gz
          sudo mv qt6 /opt
          cd ..

      - name: Cache grcov
        id: cache-grcov
        uses: actions/cache@v3
        with:
          path: grcov-build/
          key: ${{runner.os}}-grcov-v0.8.13

      - name: Install Grcov
        if: steps.cache-grcov.outputs.cache-hit != 'true'
        shell: bash
        run: |
          cargo install grcov --root ${{github.workspace}}/grcov-build --version 0.8.13

      - name: Building tests
        shell: bash
        run: |
          export PATH=/opt/qt6/bin:${{github.workspace}}/grcov-build/bin:$PATH
          mkdir -p build
          cmake -S . -B $(pwd)/build -GNinja \
            -DCMAKE_CXX_FLAGS=--coverage -DCMAKE_EXE_LINKER_FLAGS=--coverage
          cmake --build $(pwd)/build --target build_tests

      - name: Running tests
        shell: bash
        working-directory: ./build
        run: |
          export PATH=/opt/qt6/bin:${{github.workspace}}/grcov-build/bin:$PATH
          ctest --output-on-failure

          grcov $(pwd)/tests/auth/CMakeFiles/auth_tests.dir -s ${{github.workspace}} \
              -t lcov --branch --ignore-not-existing > ${{github.workspace}}/auth_lcov.info

          grcov $(pwd)/tests/nativemessaging/CMakeFiles/nativemessaging_tests.dir -s ${{github.workspace}} \
              -t lcov --branch --ignore-not-existing > ${{github.workspace}}/nativemessaging_lcov.info

          grcov $(pwd)/tests/qml/CMakeFiles/qml_tests.dir -s ${{github.workspace}} \
              -t lcov --branch --ignore-not-existing > ${{github.workspace}}/qml_lcov.info

          grcov $(pwd)/tests/unit/CMakeFiles/unit_tests.dir -s ${{github.workspace}} \
              -t lcov --branch --ignore-not-existing > ${{github.workspace}}/unit_lcov.info

      - name: Upload coverage for macos unit tests to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: .
          flags: macos_unit_tests
          name: codecov-poc
          files: auth_lcov.info,nativemessaging_lcov.info,qml_lcov.info,unit_lcov.info
          verbose: true

  windows-unit-tests:
    name: Run Unit tests on Windows
    runs-on: windows-latest

    steps:
      - name: Clone repository
        uses: actions/checkout@v3
        with:
          submodules: 'true'

      - name: Install Qt
        shell: bash
        run: |
          auth_header="$(git config --local --get http.https://github.com/.extraheader)"
          git clone https://github.com/mozilla-mobile/qt_static_windows --depth 1
          mkdir /c/MozillaVPNBuild
          cat qt_static_windows/qt6* | tar -xjf - -C /c/MozillaVPNBuild

      - name: Add msvc dev commands to PATH
        uses: ilammy/msvc-dev-cmd@v1

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.1

      - name: Install depedencies
        shell: bash
        run: |
          pip3 install -r requirements.txt

      - name: Building tests
        run: |
          mkdir ./build
          cmake -S . -B ./build -GNinja -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_PREFIX_PATH="C:\MozillaVPNBuild\lib\cmake"
          cmake --build ./build --target build_tests

      - name: Running tests
        shell: bash
        working-directory: ./build
        run: |
          ctest --output-on-failure

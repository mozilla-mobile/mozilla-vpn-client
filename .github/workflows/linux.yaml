name: Linux Packages
on:
  push:
    branches:
      - main
      - 'releases/**'
  pull_request:
    branches:
      - main
      - 'releases/**'

jobs:
  source-bundle:
    name: Source Bundle
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Generate build version
        shell: bash
        env:
          GITREF: ${{github.ref}}
        run: |
          VERSION=$(grep ':VERSION' version.pri | cut -d= -f2 | tr -d '[:space:]')
          if [[ "$GITREF" =~ ^refs/pull/([0-9]+)/merge ]]; then
            BUILDREV="~pr${BASH_REMATCH[1]}"
          elif [[ "$GITREF" =~ ^refs/heads/releases/([0-9][^/]*) ]]; then
            git fetch --unshallow
            BUILDREV="~rc$(git rev-list --count --first-parent origin/main..HEAD)"
            VERSION=${BASH_REMATCH[1]}
          else
            BUILDREV="~github${{github.run_number}}"
          fi

          # Force the upstream package version
          sed -i "s/:VERSION.*/:VERSION = ${VERSION}${BUILDREV}/" version.pri

      - name: Install source dependencies
        shell: bash
        run: |
          sudo apt-get install golang debhelper -y
          pip3 install -r requirements.txt

      - name: Build source bundle
        shell: bash
        run: ./scripts/linux/script.sh --source

      - name: Uploading
        uses: actions/upload-artifact@v2
        with:
            name: Sources
            path: .tmp

  ubuntu-pbuilder:
    name: Ubuntu Packages
    needs: source-bundle
    strategy:
      matrix:
        config:
            - { name: "Bionic", dist: bionic, ppa: "ppa:okirby/qt6-backports" }
            - { name: "Focal", dist: focal, ppa: "ppa:okirby/qt6-backports" }
            - { name: "Impish", dist: impish, ppa: "ppa:okirby/qt6-backports" }
            - { name: "Jammy", dist: jammy, ppa: "" }

    runs-on: ubuntu-latest
    env:
      BASETGZ: /var/cache/pbuilder/ubuntu-buildd-${{ matrix.config.dist }}.tgz
      QTPPA: ${{ matrix.config.ppa }}
    steps:
      - name: Download Source Package
        uses: actions/download-artifact@v2
        with:
            name: Sources

      - name: Create base ${{ matrix.config.dist }} image
        run: |
          pip3 install pyyaml
          sudo apt-get update
          sudo apt-get install pbuilder debootstrap debhelper devscripts -y
          sudo pbuilder create --distribution ${{ matrix.config.dist }} --basetgz $BASETGZ \
              --othermirror "deb http://security.ubuntu.com/ubuntu ${{ matrix.config.dist }}-updates main restricted universe" \
              --debootstrapopts --variant=buildd --extrapackages "software-properties-common gpg-agent"
          if [ ! -z "$QTPPA" ]; then
              echo '#/bin/sh' > ppa-${{ matrix.config.dist }}-install.sh
              echo "add-apt-repository ${QTPPA} -y" >> ppa-${{ matrix.config.dist }}-install.sh
              sudo pbuilder execute --basetgz $BASETGZ --save-after-exec -- ppa-${{ matrix.config.dist }}-install.sh
          fi

      - name: Building package
        shell: bash
        run: |
          mkdir packages
          sudo pbuilder build --basetgz $BASETGZ --buildresult $(pwd)/packages mozillavpn_*-${{matrix.config.dist}}[0-9].dsc

      - name: Uploading
        uses: actions/upload-artifact@v1
        with:
            name: ${{matrix.config.name}} Build
            path: packages

  rpmbuild:
    name: RPM Packages
    needs: source-bundle
    runs-on: ubuntu-latest
    container:
      image: fedora:33

    steps:
      - name: Download Source Package
        uses: actions/download-artifact@v2
        with:
            name: Sources

      - name: Install Build Dependencies
        run: |
          yum -y install rpm-build rpmdevtools yum-utils
          yum-builddep -y mozillavpn.spec

      - name: Building package
        shell: bash 
        run: rpmbuild -D "_topdir $(pwd)" -D "_sourcedir $(pwd)" -ba mozillavpn.spec

      - name: Uploading
        uses: actions/upload-artifact@v2
        with:
            name: RPM Build
            path: |
              RPMS/
              SRPMS/

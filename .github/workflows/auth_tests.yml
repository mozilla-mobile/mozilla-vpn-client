name: Auth Tests
on:
  # Only run on push to main or release branches.
  push:
    branches:
      - main
      - "releases/**"
  # For testing... delete before merge
  pull_request:
    branches:
      - main

# Restrict tests to the most recent commit.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  linux-unit-tests:
    runs-on: ubuntu-22.04
    name: Run auth tests on Linux
    steps:
      - name: Clone repository
        uses: actions/checkout@v4
        with:
          submodules: "recursive"

      - name: Install dependences
        run: |
          sudo apt-get update
          sudo apt-get install -y $(./scripts/linux/getdeps.py -a linux/debian/control)
          pip3 install -r requirements.txt

      - name: Building tests
        shell: bash
        run: |
          mkdir -p build
          cmake -S . -B $(pwd)/build -GNinja -DBUILD_CRASHREPORTING=OFF
          cmake --build $(pwd)/build --target app_auth_tests

      - name: Running tests
        shell: bash
        run: ctest -L auth --test-dir $(pwd)/build --output-on-failure

  macos-unit-tests:
    runs-on: macos-latest
    defaults:
      run:
        shell: bash -el {0}
    name: Run auth tests on MacOS

    steps:
      - name: Clone repository
        uses: actions/checkout@v4
        with:
          submodules: "recursive"

      - uses: conda-incubator/setup-miniconda@v3
        with:
          miniconda-version: "latest"
          environment-file: env-apple.yml
          activate-environment: vpn

      - name: Setup Qt for macOS
        uses: ./.github/actions/qt-setup-taskcluster
        with:
          dest: ${{ github.workspace }}/3rdparty

      - name: Compile test client
        run: |
          mkdir -p build/cmake
          cmake -S $(pwd) -B build/cmake -GNinja
          cmake --build build/cmake --target app_auth_tests

      - name: Running tests
        run: ctest -L auth --test-dir build/cmake --output-on-failure

  windows-unit-tests:
    name: Run auth tests on Windows
    runs-on: windows-latest

    steps:
      - name: Clone repository
        uses: actions/checkout@v4
        with:
          submodules: "recursive"

      - name: Setup Qt for Windows
        uses: ./.github/actions/qt-setup-taskcluster
        with:
          dest: ${{ github.workspace }}/3rdparty

      - name: Install LLVM and Clang
        uses: KyleMayes/install-llvm-action@v2
        with:
          version: 20.1.4

      - name: Setup clang env variables
        run: |
          echo "CC=${{ env.LLVM_PATH }}/bin/clang-cl.exe" >> $GITHUB_ENV
          echo "CXX=${{ env.LLVM_PATH }}/bin/clang-cl.exe" >> $GITHUB_ENV

      - uses: actions/setup-python@v5
        with:
          python-version: "3.9"
          cache: "pip"
      - run: pip install -r requirements.txt

      - name: Cache Wireguard NT
        id: cache-wireguard-nt
        uses: actions/cache@v4
        with:
          path: 3rdparty/wireguard-nt
          key: wireguard-nt-${{ hashFiles('windows/wireguard_nt/CMakeLists.txt') }}

      - name: Download Wireguard NT
        if: steps.cache-wireguard-nt.outputs.cache-hit != 'true'
        run: |
          WIREGUARD_NT_URL=$(grep -Eo 'DOWNLOAD[[:space:]].*' windows/wireguard_nt/CMakeLists.txt | awk '{print $2}')
          curl -sSL -o wireguard-nt.zip $WIREGUARD_NT_URL
          unzip -d 3rdparty/ wireguard-nt.zip

      - name: Building tests
        run: |
          mkdir ./build-win

          cmake -S . -B ./build-win -GNinja -DCMAKE_BUILD_TYPE=Debug -DWIREGUARD_FOLDER="$(pwd)/3rdparty/wireguard-nt"
          cmake --build ./build-win --target app_auth_tests

      - name: Running tests
        shell: bash
        run: ctest -L auth --test-dir ./build-win --output-on-failure

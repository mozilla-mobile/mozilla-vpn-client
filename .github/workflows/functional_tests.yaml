name: Functional tests
on:
  push:
    branches:
      - main
      - 'releases/**'
  pull_request:
    branches:
      - main
      - 'releases/**'

# Restrict tests to the most recent commit.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build_windows_test_app:
    name: Build  windows test client
    runs-on: windows-latest
    outputs:
      matrix: ${{ steps.testGen.outputs.tests }}

    steps:
      - name: Clone repository
        uses: actions/checkout@v3

      - name: Checkout submodules
        shell: bash
        run: |
          auth_header="$(git config --local --get http.https://github.com/.extraheader)"
          git submodule sync --recursive
          git -c "http.extraheader=$auth_header" -c protocol.version=2 submodule update --init --force --recursive --depth=1

      - name: Install Qt
        shell: bash
        run: |
          auth_header="$(git config --local --get http.https://github.com/.extraheader)"
          git clone https://github.com/mozilla-mobile/qt_static_windows --depth 1
          mkdir /c/MozillaVPNBuild
          cat qt_static_windows/qt6* > qt6_static.tar.bz2
          tar xf qt6_static.tar.bz2 -C /c/MozillaVPNBuild

      - name: Add msvc dev commands to PATH
        uses: ilammy/msvc-dev-cmd@v1

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.1

      - name: Compile windows test client
        shell: bash
        run: |
          pip3 install -r requirements.txt
          
          mkdir -p build/cmake
          
          export PATH=/c/MozillaVPNBuild/bin:$PATH          

          cmake -S . -B $(pwd)/build/cmake -DBUILD_DUMMY=ON
          cmake --build $(pwd)/build/cmake --config Release

      - uses: actions/upload-artifact@v3
        with:
          name: test-client-${{ github.sha }}
          path: build/

      - name: Generate tasklist
        id: testGen
        shell: bash
        run: |
          echo -n "::set-output name=tests::"
          for test in $(find tests/functional -name 'test*.js' | sort); do
            printf '{"name": "%s", "path": "%s"}' $(basename ${test%.js} | sed -n 's/test//p') $test
          done | jq -s -c

  windowsfunctionaltests:
    name: Windows functional tests
    needs:
      - build_windows_test_app
    runs-on: windows-latest
    timeout-minutes: 45
    strategy:
      fail-fast: true
      matrix:
        test: ${{ fromJson(needs.build_windows_test_app.outputs.matrix) }}

    steps:
      - name: Clone repository
        uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: test-client-${{ github.sha }}
          path: build/

      - name: Install Windows Dependencies
        run: |
          mkdir -p tests/artifacts
          pip3 install -r requirements.txt
          npm install
      
      - name: Running ${{matrix.test.name}} Tests
        id: runTests
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 15
          max_attempts: 3
          command: |
            set HEADLESS=yes
            mkdir -p tests/artifact
            npm run functionalTest -- ${{matrix.test.path}}
        env:
          ARTIFACT_DIR: ${{ runner.temp }}/artifacts
          MVPN_BIN: ./build/cmake/src/mozillavpn
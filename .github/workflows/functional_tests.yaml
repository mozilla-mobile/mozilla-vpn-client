name: Functional tests
on:
  push:
    branches:
      - main
      - 'releases/**'
  pull_request:
    branches:
      - main
      - 'releases/**'

jobs:
  test_list:
    name: Generate Tasklist
    runs-on: ubuntu-20.04
    outputs:
      matrix: ${{ steps.testGen.outputs.tests }}
    steps:
      - name: Install Packages
        run: |
          sudo apt update
          sudo apt install jq -y
      
      - name: Clone repository
        uses: actions/checkout@v2
      - id: testGen
        shell: bash
        run: |
          echo -n "::set-output name=tests::"
          for test in $(find tests/functional -name 'test*.js' | sort); do
            printf '{"name": "%s", "path": "%s"}' $(basename ${test%.js} | sed -n 's/test//p') $test
          done | jq -s -c
      - name: Check Tests
        shell: bash
        env:
          TEST_LIST: ${{ steps.testGen.outputs.tests }}
        run: |
          echo $TEST_LIST | jq

  build_test_app:
    name: Build Test Client
    runs-on: ubuntu-20.04
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Checkout submodules
        shell: bash
        run: |
          auth_header="$(git config --local --get http.https://github.com/.extraheader)"
          git submodule sync --recursive
          git -c "http.extraheader=$auth_header" -c protocol.version=2 submodule update --init --force --recursive --depth=1

      - name: Cache build
        id: cache-build
        uses: actions/cache@v2
        with:
          path: build/
          key: ${{ github.sha }}

      - name: Install Linux packages
        if: steps.cache-build.outputs.cache-hit != 'true'
        run: |
          mkdir -p build/archive

          # Add external PPA, latest version of QT is 5.12.x for Ubuntu 20.04
          sudo add-apt-repository ppa:beineri/opt-qt-5.15.2-focal -y
          sudo apt-get -o "Dir::Cache::archives=$(pwd)/build/archive" install -y \
               git qt515base qt515tools qt515svg qt515networkauth-no-lgpl qt515charts-no-lgpl \
               libgl-dev libpolkit-gobject-1-dev qt515quickcontrols2 qt515imageformats \
               qt515graphicaleffects qt515websockets qt515declarative -y
          sudo chown -R $USER:$USER build/archive

      - name: Compile test client
        shell: bash
        if: steps.cache-build.outputs.cache-hit != 'true'
        run: |
          export PATH=/opt/qt515/bin:$PATH

          pip3 install -r requirements.txt

          git submodule update --remote --depth 1 i18n
          python3 scripts/importLanguages.py
          python3 scripts/generate_glean.py

          # Delete unit tests, so we can get to testing faster
          sed -i '/tests\/unit/d' mozillavpn.pro
          qmake CONFIG+=DUMMY QMAKE_CXX=clang++ QMAKE_LINK=clang++ CONFIG+=debug CONFIG+=inspector QT+=svg
          make -j$(nproc)
          cp ./src/mozillavpn build/

      - name: Check build
        run: |
          ls -ial build/

  functionaltests:
    name: Functional tests
    needs: 
      - build_test_app
      - test_list
    runs-on: ubuntu-20.04
    timeout-minutes: 60
    strategy:
      fail-fast: false # Don't cancel other jobs if a test fails
      matrix:
        test: ${{ fromJson(needs.test_list.outputs.matrix) }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v2
      
      - name: Cache build
        id: cache-build
        uses: actions/cache@v2
        with:
          path: build/
          key: ${{ github.sha }}

      - name: Install dependecies
        run: |
          sudo dpkg -i build/archive/*.deb
          sudo apt install --no-upgrade firefox xvfb -y
          pip3 install -r requirements.txt
          npm install dotenv
          npm install selenium-webdriver
          npm install mocha
          npm install websocket
      
      - name: Check build
        shell: bash
        run: ./build/mozillavpn -v

      - name: Launching API proxy
        shell: bash
        run: ./tests/proxy/wsgi.py --mock-devices > /dev/null &

      - name: Running ${{matrix.test.name}} Tests
        id: runTests
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 15
          max_attempts: 5
          command: |
            export PATH=$GECKOWEBDRIVER:$(npm bin):$PATH
            export HEADLESS=yes
            mkdir -p $ARTIFACT_DIR
            xvfb-run -a ./scripts/test_function.sh ./build/mozillavpn ${{matrix.test.path}}
          on_retry_command: npm run cleanup-flaky-script-output
        env:
          MVPN_API_BASE_URL: http://localhost:5000
          ARTIFACT_DIR: ${{ runner.temp }}/artifacts
          ACCOUNT_EMAIL: ${{ secrets.ACCOUNT_EMAIL }}
          ACCOUNT_PASSWORD: ${{ secrets.ACCOUNT_PASSWORD }}

      - name: Uploading artifacts
        uses: actions/upload-artifact@v1
        if: ${{ always() }}
        with:
          name: ${{matrix.test.name}} Logs
          path: ${{ runner.temp }}/artifacts

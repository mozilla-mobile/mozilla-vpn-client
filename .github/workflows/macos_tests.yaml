name: MacOS Tests
on:
  push:
    branches:
      - main
      - "releases/**"
  pull_request:
    branches:
      - main
      - "releases/**"

# Restrict tests to the most recent commit.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build_test_addons:
    name: Build Test Addons
    uses: ./.github/workflows/build_addons.yaml
    with:
      test-addons-name: test-addons-${{ github.sha }}

  build_test_app:
    name: Build Test Client
    runs-on: ubuntu-latest
    env:
      QT_VERSION: 6.6.3
    defaults:
      run:
        shell: bash -el {0}
    outputs:
      matrix: ${{ steps.testGen.outputs.tests }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v4
        with:
          submodules: "recursive"

      - name: Checkout macOS SDK
        uses: actions/checkout@v4
        with:
          repository: alexey-lysiuk/macos-sdk
          path: 3rdparty/macos-sdk
          ref: main
          sparse-checkout: MacOSX15.5.sdk/
      - run: echo "SDKROOT=$(find ${{ github.workspace }}/3rdparty/macos-sdk -name 'SDKSettings.plist' -printf '%h\n')" >> $GITHUB_ENV

      - uses: conda-incubator/setup-miniconda@v3
        with:
          miniconda-version: "latest"
          environment-file: "env-apple.yml"
          activate-environment: vpn

      - name: Setup compiler cache
        uses: actions/cache/restore@v4
        with:
          path: ~/.cache/ccache
          key: ccache-macos-${{ github.sha }}
          restore-keys: ccache-macos-${{ github.event.pull_request.base.sha }}

      - name: Setup Qt for macOS
        uses: ./.github/actions/qt-setup-taskcluster
        with:
          dest: ${{ github.workspace }}/3rdparty

      - name: Cache Qt6 host tools
        id: qt-tools-cache
        uses: actions/cache@v4
        with:
          path: 3rdparty/qt-host-tools
          key: qt-tools-${{ env.QT_VERSION }}

      - name: Install Qt6 host tools
        if: steps.qt-tools-cache.outputs.cache-hit != 'true'
        run: |
          python3 -m aqt install-qt -O 3rdparty/qt-aqt-install linux desktop ${QT_VERSION} --archives icu qtbase qtdeclarative qttools
          mv 3rdparty/qt-aqt-install/${QT_VERSION}/gcc_64/ 3rdparty/qt-host-tools
          rm -rf 3rdparty/qt-aqt-install
          find 3rdparty/qt-host-tools/lib -name '*.a' -delete

      - name: Compile test client
        run: |
          mkdir -p build/cmake
          cmake -S $(pwd) -B build/cmake -GNinja -DCMAKE_BUILD_TYPE=RelWithDebInfo \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_C_COMPILER_LAUNCHER=ccache \
            -DCMAKE_PREFIX_PATH=3rdparty/qt-macos/lib/cmake \
            -DCMAKE_TOOLCHAIN_FILE=$(pwd)/scripts/macos/osxcross-toolchain.cmake \
            -DCMAKE_OSX_ARCHITECTURES="arm64" \
            -DQT_HOST_PATH=3rdparty/qt-host-tools \
            -DQT_HOST_PATH_CMAKE_DIR=3rdparty/qt-host-tools/lib/cmake
          cmake --build build/cmake
          cp -r ./build/cmake/src/Mozilla\ VPN.app/ build/Mozilla\ VPN.app

      - uses: actions/upload-artifact@v4
        with:
          name: test-client-${{ github.sha }}
          path: |
            build/
            !build/cmake/

      - name: Save compiler cache
        uses: actions/cache/save@v4
        if: ${{ github.event_name != 'pull_request' }}
        with:
          path: ~/.cache/ccache
          key: ccache-macos-${{ github.sha }}

      - name: Generate tasklist
        id: testGen
        run: |
          echo -n "tests=" >> $GITHUB_OUTPUT
          for test in $(find tests/functional -name 'test*.js' | sort); do
            printf '{"name": "%s", "path": "%s"}' $(basename ${test%.js} | sed -n 's/test//p') $test
          done | jq -s -c >> $GITHUB_OUTPUT

      - name: Check tests
        env:
          TEST_LIST: ${{ steps.testGen.outputs.tests }}
        run: |
          echo $TEST_LIST | jq

  functionaltests:
    name: Functional tests
    needs:
      - build_test_app
      - build_test_addons
    runs-on: macos-latest
    timeout-minutes: 45
    strategy:
      fail-fast: false # Don't cancel other jobs if a test fails
      matrix:
        test: ${{ fromJson(needs.build_test_app.outputs.matrix) }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: test-client-${{ github.sha }}
          path: build/

      - uses: actions/download-artifact@v4
        with:
          name: test-addons-${{ github.sha }}
          path: build/addons/

      - uses: actions/setup-python@v5
        env:
          PIP_DISABLE_PIP_VERSION_CHECK: 1
        with:
          python-version: "3.9"
          cache: "pip"
      - run: pip install -r requirements.txt

      - uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: "npm"
      - run: npm install

      - name: Check build
        shell: bash
        run: |
          chmod +x ./build/Mozilla\ VPN.app/Contents/MacOS/Mozilla\ VPN
          ./build/Mozilla\ VPN.app/Contents/MacOS/Mozilla\ VPN -v

      - name: Running ${{ matrix.test.name }} Tests
        shell: bash
        id: runTests
        env:
          TZ: Europe/London
          HEADLESS: yes
          ARTIFACT_DIR: ${{ runner.temp }}/artifacts
          MVPN_ADDONS_PATH: ./build/addons
          MVPN_BIN: ./build/Mozilla VPN.app/Contents/MacOS/Mozilla VPN
        run: |
          export PATH=$GECKOWEBDRIVER:$(npm bin):$PATH
          mkdir -p $ARTIFACT_DIR
          npm run functionalTest --  --retries 3 ${{ matrix.test.path }}

      - name: Uploading artifacts
        uses: actions/upload-artifact@v4
        if: ${{ always() }}
        with:
          name: ${{ matrix.test.name }} Logs
          path: ${{ runner.temp }}/artifacts
          if-no-files-found: ignore

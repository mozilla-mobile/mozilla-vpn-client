// -*- mode: C++ -*-

// AUTOGENERATED BY glean_parser.  DO NOT EDIT.
{# The rendered source is autogenerated, but this
Jinja2 template is not. Please file bugs! #}

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#ifndef mozilla_Metrics_h
#define mozilla_Metrics_h

#include "glean/metrictypes.h"

#include <QString>
#include <QObject>

{% import 'macros.jinja2' as macros %}

namespace mozilla::glean {
{% for category_name, objs in all_objs.items() %}
namespace {{ category_name|snake_case }} {
  {% for obj in objs.values() %}
  {% if obj|attr("_generate_enums") %}
{{ macros.generate_extra_keys(obj, obj|metric_id) }}
  {%- endif %}
  {% endfor %}
}
{% endfor %}
} // namespace mozilla::glean

{% for category_name, objs in all_objs.items() %}
  {% for obj in objs.values() %}
  {% if obj|attr("_generate_enums") %}
{{ macros.generate_extra_keys_parser(obj, category_name) }}
  {%- endif %}
  {% endfor %}
{% endfor %}

{% for category_name, objs in all_objs.items() %}
class __DONOTUSE__{{ category_name|Camelize }} final {
  Q_GADGET

{% for obj in objs.values() %}
  Q_PROPERTY({{ obj|type_name }} {{obj.name|camelize }} READ {{ obj.name|camelize }} CONSTANT);
{% endfor %}

  public:
    __DONOTUSE__{{ category_name|Camelize }}() = default;
    ~__DONOTUSE__{{ category_name|Camelize }}() = default;

    {% for obj in objs.values() %}
    {{ obj|type_name }} {{obj.name|camelize }} () const { return m_{{obj.name|camelize }}; };
    {% endfor %}

  private:
    {% for obj in objs.values() %}
    {% if obj|attr("allowed_extra_keys_with_types")|length > 0 %}__DONOTUSE__{{ obj.name|Camelize }}ExtraParser m_{{obj.name|camelize }}ExtraParser;{%- endif %}
    {{ obj|type_name }} m_{{obj.name|camelize }} = {{ obj|type_name }}({{obj|metric_id}}{% if obj|attr("allowed_extra_keys_with_types")|length > 0 %}, &m_{{obj.name|camelize }}ExtraParser {%- endif %});
    {% endfor %}
};
{% endfor %}

// This class is not meant to be used directly.
// It is exposed as a singleton to QML.
//
// The reason for this is to keep consistency with the Glean API on m-c.
// On JavaScript pings are accessed through GleanMetrics.<MyMetric> and
// on C++ they are accessed through mozilla::glean_pings::<my_metric>.
class __DONOTUSE__GleanMetrics final : public QObject {
    Q_OBJECT
    Q_DISABLE_COPY_MOVE(__DONOTUSE__GleanMetrics)

    {% for category_name, _ in all_objs.items() %}
    Q_PROPERTY(__DONOTUSE__{{ category_name|Camelize }} {{ category_name|camelize }} READ {{ category_name|camelize }} CONSTANT);
    {% endfor %}

    private:
        __DONOTUSE__GleanMetrics() = default;

    public:
        ~__DONOTUSE__GleanMetrics() = default;

        static __DONOTUSE__GleanMetrics* instance() {
            if (!s_instance) {
                s_instance = new __DONOTUSE__GleanMetrics();
            }

            return s_instance;
        }

        {% for category_name, _ in all_objs.items() %}
        __DONOTUSE__{{ category_name|Camelize }} {{ category_name|camelize }} () const { return m_{{ category_name|camelize }}; };
        {% endfor %}

    private:
        {% for category_name, _ in all_objs.items() %}
        __DONOTUSE__{{ category_name|Camelize }} m_{{ category_name|camelize }} = __DONOTUSE__{{ category_name|Camelize }}() ;
        {% endfor %}

        inline static __DONOTUSE__GleanMetrics* s_instance = nullptr;
};

namespace mozilla::glean {
{% for category_name, objs in all_objs.items() %}
namespace {{ category_name|snake_case }} {
    {% for obj in objs.values() %}
    /**
     * generated from {{ category_name }}.{{ obj.name }}
     *
     * {{ obj.description|wordwrap() | replace('\n', '\n     * ') }}
     */
    inline {{ obj|type_name }} {{obj.name|snake_case }} = __DONOTUSE__GleanMetrics::instance()->{{ category_name|camelize }}().{{ obj.name|camelize }}();

    {% endfor %}
}
{% endfor %}
} // namespace mozilla::glean

#endif // mozilla_Metrics_h

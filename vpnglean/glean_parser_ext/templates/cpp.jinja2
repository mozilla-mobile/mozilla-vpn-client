// -*- mode: C++ -*-

// AUTOGENERATED BY glean_parser.  DO NOT EDIT.
{# The rendered source is autogenerated, but this
Jinja2 template is not. Please file bugs! #}

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#ifndef mozilla_Metrics_h
#define mozilla_Metrics_h

#include "glean/metrictypes.h"

#include <QString>

namespace mozilla::glean {

{%- macro generate_extra_keys(obj) -%}
{% for name, suffix in obj["_generate_enums"] %}
{# we always use the `extra` suffix, because we only expose the new event API #}
{% set suffix = "Extra" %}
{% if obj|attr(name)|length %}
    {% if obj.has_extra_types %}
    {{ extra_keys_with_types(obj, name, suffix)|indent }}
    {% else %}
#error "Untyped event extras not supported. Please annotate event extras with a type. See documentation for details. (Metric: {{obj.category}}.{{obj.name}}, defined in: {{obj.defined_in['filepath']}}:{{obj.defined_in['line']}})"
    {% endif %}
{% endif %}
{% endfor %}
{%- endmacro -%}

{%- macro extra_keys_with_types(obj, name, suffix) -%}
struct {{ obj.name|Camelize }}{{ suffix }} {
  {% for item, type in obj|attr(name) %}
  QVariant _{{ item|camelize }} = QVariant();
  {% endfor %}

  FfiExtra ToFfiExtra() const {
    const char* extraKeys[{{ obj|attr(name)|length }} + 1];
    const char* extraValues[{{ obj|attr(name)|length }} + 1];
    int count = 0;

    QVector<QByteArray> _keepStringsAlive;
    {% for item, type in obj|attr(name) %}
    if (_{{item|camelize}}.canConvert<{{type|extra_type_name}}>()) {
      {% if type == "string" %}
      _keepStringsAlive.append(_{{item|camelize}}.toString().toUtf8());
      extraValues[count] = _keepStringsAlive[count].constData();
      {% elif type == "boolean" %}
      // We don't need to actually keep these alive since they are literal strings.
      // However we want to keep the indexes of keepStringsAlive in sync with the indexes of extraValues, so we keep this.
      _keepStringsAlive.append(_{{item|camelize}}.toBool() ? "true" : "false");
      extraValues[count] = _keepStringsAlive[count];
      {% elif type == "quantity" %}
      _keepStringsAlive.append(QString::number(_{{item|camelize}}.toInt()).toUtf8());
      extraValues[count] = _keepStringsAlive[count].constData();
      {% else %}
#error "Glean: Invalid extra key type for metric {{obj.category}}.{{obj.name}}, defined in: {{obj.defined_in['filepath']}}:{{obj.defined_in['line']}})"
      {% endif %}
      extraKeys[count] = "{{item}}";
      count++;
    }
    {% endfor %}

    FfiExtra extras;
    extras.keys = std::move(extraKeys);
    extras.values = std::move(extraValues);
    extras.count = count;
    return extras;
  };
};
{%- endmacro %}

struct NoExtraKeys;

struct FfiExtra {
  const char* const* keys;
  const char* const* values;
  int count;
};

{% for category_name, objs in all_objs.items() %}
namespace {{ category_name|snake_case }} {
    {% for obj in objs.values() %}
    /**
     * generated from {{ category_name }}.{{ obj.name }}
     */
    {% if obj|attr("_generate_enums") %}
{{ generate_extra_keys(obj) }}
    {%- endif %}
    /**
     * {{ obj.description|wordwrap() | replace('\n', '\n     * ') }}
     */
    constexpr {{ obj|type_name }} {{obj.name|snake_case }}({{obj|metric_id}});

    {% endfor %}
}
{% endfor %}

} // namespace mozilla::glean

#endif // mozilla_Metrics_h

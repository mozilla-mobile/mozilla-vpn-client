/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

buildscript {
    ext{
        kotlin_version = "1.4.10"
        //  for libwg
        appcompatVersion = '1.1.0'
        annotationsVersion = '1.0.1'
        databindingVersion = '3.3.1'
        jsr305Version = '3.0.2'
        streamsupportVersion = '1.7.0'
        threetenabpVersion = '1.1.1'
    }
    repositories {
        google()
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:4.0.0'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

repositories {
    mavenCentral()
    google()
    jcenter()
}


allprojects {
    repositories {
        mavenCentral()
        google()
        jcenter()
    }
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'



dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar', '*.aar'])
    implementation 'androidx.core:core-ktx:1.1.0'
    implementation 'com.android.installreferrer:installreferrer:1.1'
    implementation 'com.wireguard.android:tunnel:1.0.20200927'
    coreLibraryDesugaring "com.android.tools:desugar_jdk_libs:1.0.10"
}

android {
    /*******************************************************
     * The following variables:
     * - androidBuildToolsVersion,
     * - androidCompileSdkVersion
     * - qt5AndroidDir - holds the path to qt android files
     *                   needed to build any Qt application
     *                   on Android.
     *
     * are defined in gradle.properties file. This file is
     * updated by QtCreator and androiddeployqt tools.
     * Changing them manually might break the compilation!
     *******************************************************/

    compileSdkVersion androidCompileSdkVersion.toInteger()

    buildToolsVersion '28.0.3'

    dexOptions {
       javaMaxHeapSize "3g"
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = [qt5AndroidDir + '/src', 'src', 'java']
            aidl.srcDirs = [qt5AndroidDir + '/src', 'src', 'aidl']
            res.srcDirs = [qt5AndroidDir + '/res', 'res']
            resources.srcDirs = ['resources']
            renderscript.srcDirs = ['src']
            assets.srcDirs = ['assets']
            jniLibs.srcDirs = ['libs']
       }
    }

    lintOptions {
        abortOnError false
    }

    // Do not compress Qt binary resources file
    aaptOptions {
        noCompress 'rcc'
    }

    buildTypes {
        release {
            // That would enable treeshaking and remove java code that is just called from qt
            minifyEnabled false
        }
        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
        }
    }

    defaultConfig {
        resConfig "en"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode  System.getenv("VERSIONCODE").toInteger()
        versionName  System.getenv("SHORTVERSION")
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
        coreLibraryDesugaringEnabled = true
    }
    splits {
                // Configures multiple APKs based on ABI.
                abi {
                    if(System.getenv("SPLITAPK")== "1" ){
                        enable true
                        // Resets the list of ABIs that Gradle should create APKs for to none.
                        reset()

                        // Specifies a list of ABIs that Gradle should create APKs for.
                        include "x86", "armeabi-v7a", "arm64-v8a", "x86_64"
                        // Also generate one universal apk that contains all abi's
                        universalApk true
                    }else{
                        enable false
                    }
                }
            }

}

import com.android.build.OutputFile
// Map for the version code that gives each ABI a value.
ext.abiCodes = ['armeabi-v7a':1,"arm64-v8a":2, x86:3, x86_64:4]
android.applicationVariants.all { variant ->
  // Assigns a different version code for each output APK
  // other than the universal APK.
  variant.outputs.each { output ->
    def baseAbiVersionCode = project.ext.abiCodes.get(output.getFilter(OutputFile.ABI))
    if (baseAbiVersionCode != null) {
      output.versionCodeOverride =
              baseAbiVersionCode + variant.versionCode
    }
  }
} 

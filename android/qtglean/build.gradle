/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

// Mostly copied from 3rdparty/glean/glean-core/android/build.gradle
// We can't use it directly, because we don't want to use the `glean-native`
// project used in there which adds a glean-core binary, we want to use the
// qtglean binary instead and we don't event need to add it here because
// those symbols are already alvailable from the VPN project.

buildscript {
    repositories {
        maven {
            url "https://maven.mozilla.org/maven2"
        }
        mavenCentral()
    }

    dependencies {
        classpath "org.mozilla.telemetry:glean-gradle-plugin:52.2.0"
    }
}

plugins {
    id "com.jetbrains.python.envs" version "0.0.26"
}

// Copied from from 3rdparty/glean/build.gradle
def versions = [
    android_gradle_plugin: '7.3.0',
    coroutines: '1.6.4',
    jna: '5.12.1',
    junit: '4.12',
    mockito: '3.11.2',
    mockwebserver: '4.9.1', // This is different than a-c, but we're fine, it's only tests.
    kotlin: '1.7.20',
    robolectric: '4.9',
    rust_android_plugin: '0.9.3',

    // Android X dependencies
    androidx_annotation: '1.1.0',
    androidx_appcompat: '1.3.0',
    androidx_browser: '1.3.0',
    androidx_core: '1.8.0',
    androidx_espresso: '3.3.0',
    androidx_junit: '1.1.3',
    androidx_lifecycle: '2.5.1',
    androidx_test: '1.4.0',
    androidx_work: '2.7.1',
    androidx_uiautomator: '2.2.0',
]

apply plugin: "com.android.library"
apply plugin: "kotlin-android"

def repositoryRoot = "$rootDir/../../.."
def gleanVendoredPath = "$repositoryRoot/3rdparty/glean"

ext.allowGleanInternal = true
ext.gleanNamespace = "mozilla.telemetry.glean"
ext.gleanYamlFiles = [
    "$gleanVendoredPath/glean-core/metrics.yaml",
    "$gleanVendoredPath/glean-core/pings.yaml",
    "$gleanVendoredPath/glean-core/android/metrics.yaml",
]

android {
    compileSdkVersion Config.compileSdkVersion
    defaultConfig {
        minSdkVersion Config.minSdkVersion
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            // Export our rules in debug, as a consumer might still enable proguard/r8
            consumerProguardFiles "$gleanVendoredPath/proguard-rules-consumer.pro"
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            consumerProguardFiles "$gleanVendoredPath/proguard-rules-consumer.pro"
        }

        withoutLib {
            initWith release
        }
    }

    sourceSets {
        all {
            manifest.srcFile "$gleanVendoredPath/glean-core/android/src/main/AndroidManifest.xml"
            kotlin.srcDirs += "$gleanVendoredPath/glean-core/android/src/main"
        }
    }

    // This is required to support new AndroidX support libraries.
    // See mozilla-mobile/android-components#842
    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions {
            jvmTarget = "1.8"
        }
    }

    testOptions {
        unitTests.all {
            testLogging {
                showStandardStreams = true
            }

            maxHeapSize = "1024m"
        }

        unitTests {
            includeAndroidResources = true
        }
    }
}

android.libraryVariants.all { variant ->
    def uniffiGeneratedPath = "generated/source/uniffi/${variant.name}/java"
    def udlFilePath = "glean-core/src/glean.udl"
    def t = tasks.register("generate${variant.name.capitalize()}UniFFIBindings", Exec) {
        workingDir "$gleanVendoredPath"
        commandLine "cargo", "uniffi-bindgen", "generate", "--no-format", "${udlFilePath}", "--language", "kotlin", "--out-dir", "${buildDir}/${uniffiGeneratedPath}"
        outputs.dir "${buildDir}/${uniffiGeneratedPath}"
        // Re-generate if the interface definition changes.
        inputs.file "$gleanVendoredPath/glean-core/src/glean.udl"
        // Re-generate if our uniffi-bindgen tooling changes.
        inputs.dir "$gleanVendoredPath/tools/embedded-uniffi-bindgen/"
        // Re-generate if our uniffi-bindgen version changes.
        inputs.file "$gleanVendoredPath/Cargo.lock"
    }
    variant.registerJavaGeneratingTask(t.get(), new File(buildDir, uniffiGeneratedPath))
}

configurations {
    // There's an interaction between Gradle's resolution of dependencies with different types
    // (@jar, @aar) for `implementation` and `testImplementation` and with Android Studio's built-in
    // JUnit test runner.  The runtime classpath in the built-in JUnit test runner gets the
    // dependency from the `implementation`, which is type @aar, and therefore the JNA dependency
    // doesn't provide the JNI dispatch libraries in the correct Java resource directories.  I think
    // what's happening is that @aar type in `implementation` resolves to the @jar type in
    // `testImplementation`, and that it wins the dependency resolution battle.
    //
    // A workaround is to add a new configuration which depends on the @jar type and to reference
    // the underlying JAR file directly in `testImplementation`.  This JAR file doesn't resolve to
    // the @aar type in `implementation`.  This works when invoked via `gradle`, but also sets the
    // correct runtime classpath when invoked with Android Studio's built-in JUnit test runner.
    // Success!
    jnaForTest
}

dependencies {
    jnaForTest "net.java.dev.jna:jna:$versions.jna@jar"
    implementation "net.java.dev.jna:jna:$versions.jna@aar"

    // Note: the following version must be kept in sync
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$versions.kotlin"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$versions.coroutines"

    implementation "androidx.annotation:annotation:$versions.androidx_annotation"
    implementation "androidx.lifecycle:lifecycle-common:$versions.androidx_lifecycle"
    implementation "androidx.lifecycle:lifecycle-process:$versions.androidx_lifecycle"
    implementation "androidx.work:work-runtime-ktx:$versions.androidx_work"

    // We need a compileOnly dependency on the following block of testing
    // libraries in order to expose the GleanTestRule to applications/libraries
    // using the Glean SDK.
    // We can't simply create a separate package otherwise we would need
    // to provide a public API for the testing package to access the
    // Glean internals, which is something we would not want to do.
    compileOnly "junit:junit:$versions.junit"
    compileOnly "androidx.work:work-testing:$versions.androidx_work"

    // For reasons unknown, resolving the jnaForTest configuration directly
    // trips a nasty issue with the Android-Gradle plugin 3.2.1, like `Cannot
    // change attributes of configuration ':PROJECT:kapt' after it has been
    // resolved`.  I think that the configuration is being made a
    // super-configuration of the testImplementation and then the `.files` is
    // causing it to be resolved.  Cloning first dissociates the configuration,
    // avoiding other configurations from being resolved.  Tricky!
    testImplementation files(configurations.jnaForTest.copyRecursive().files)
    testImplementation "androidx.test.ext:junit:$versions.androidx_junit"
    testImplementation "org.robolectric:robolectric:$versions.robolectric"
    testImplementation "org.mockito:mockito-core:$versions.mockito"
    testImplementation "androidx.test:core-ktx:$versions.androidx_test"
    testImplementation "com.squareup.okhttp3:mockwebserver:$versions.mockwebserver"
    testImplementation "androidx.work:work-testing:$versions.androidx_work"

    androidTestImplementation "androidx.test:runner:$versions.androidx_test"
    androidTestImplementation "androidx.test.espresso:espresso-core:$versions.androidx_espresso"
}

apply plugin: "org.mozilla.telemetry.glean-gradle-plugin"

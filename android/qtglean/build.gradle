/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

// Mostly copied from 3rdparty/glean/glean-core/android/build.gradle
// We can't use it directly, because we don't want to use the `glean-native`
// project used in there which adds a glean-core binary, we want to use the
// qtglean binary instead and we don't event need to add it here because
// those symbols are already alvailable from the VPN project.

def repositoryRoot = "$rootDir/../../.."
def gleanVendoredPath = "$repositoryRoot/3rdparty/glean"

// Path to the CMake build directory.
// CMAKE?! Correct. Remember, we are using CMake to build this gradle project...
// This is equivalent to CMAKE_BINARY_DIR from that parent CMake project.
def cmakeBinaryDir = "$rootDir/../.."

apply plugin: "com.android.library"
apply plugin: "kotlin-android"

android {
    namespace "mozilla.telemetry.glean"

    compileSdkVersion Config.compileSdkVersion
    defaultConfig {
        resConfig "en"
        minSdkVersion Config.minSdkVersion
        targetSdkVersion Config.targetSdkVersion
        buildConfigField "int", "VERSION_CODE", System.getenv("VERSIONCODE") ?: "99999"
        buildConfigField "String", "VERSION_NAME", '"' + (System.getenv("SHORTVERSION") ?: "") + '"'
    }

    sourceSets {
        main {
            manifest.srcFile "$gleanVendoredPath/glean-core/android/src/main/AndroidManifest.xml"
            kotlin.srcDirs = [
                "$gleanVendoredPath/glean-core/android/src/main",
                "$cmakeBinaryDir/glean"
            ]
        }
    }

    buildFeatures {
        buildConfig = true
    }
}

// From here on this code is copy pasted from 3rdparty/glean/glean-core/android/build.gradle

configurations {
    // There's an interaction between Gradle's resolution of dependencies with different types
    // (@jar, @aar) for `implementation` and `testImplementation` and with Android Studio's built-in
    // JUnit test runner.  The runtime classpath in the built-in JUnit test runner gets the
    // dependency from the `implementation`, which is type @aar, and therefore the JNA dependency
    // doesn't provide the JNI dispatch libraries in the correct Java resource directories.  I think
    // what's happening is that @aar type in `implementation` resolves to the @jar type in
    // `testImplementation`, and that it wins the dependency resolution battle.
    //
    // A workaround is to add a new configuration which depends on the @jar type and to reference
    // the underlying JAR file directly in `testImplementation`.  This JAR file doesn't resolve to
    // the @aar type in `implementation`.  This works when invoked via `gradle`, but also sets the
    // correct runtime classpath when invoked with Android Studio's built-in JUnit test runner.
    // Success!
    jnaForTest
}

dependencies {
    jnaForTest(gleanLibs.jna) {
        artifact {
            extension ="jar"
            type = "jar"
        }
    }
    implementation(gleanLibs.jna) {
        artifact {
            extension ="aar"
            type = "aar"
        }
    }

    implementation gleanLibs.androidx.annotation
    implementation gleanLibs.androidx.lifecycle.common
    implementation gleanLibs.androidx.lifecycle.process
    implementation gleanLibs.androidx.work
    implementation gleanLibs.kotlinx.coroutines

    // We need a compileOnly dependency on the following block of testing
    // libraries in order to expose the GleanTestRule to applications/libraries
    // using the Glean SDK.
    // We can't simply create a separate package otherwise we would need
    // to provide a public API for the testing package to access the
    // Glean internals, which is something we would not want to do.
    compileOnly gleanLibs.junit
    compileOnly gleanLibs.test.work

    // For reasons unknown, resolving the jnaForTest configuration directly
    // trips a nasty issue with the Android-Gradle plugin 3.2.1, like `Cannot
    // change attributes of configuration ':PROJECT:kapt' after it has been
    // resolved`.  I think that the configuration is being made a
    // super-configuration of the testImplementation and then the `.files` is
    // causing it to be resolved.  Cloning first dissociates the configuration,
    // avoiding other configurations from being resolved.  Tricky!
    testImplementation files(configurations.jnaForTest.copyRecursive().files)
    testImplementation gleanLibs.mockito
    testImplementation gleanLibs.mockwebserver
    testImplementation gleanLibs.robolectric
    testImplementation gleanLibs.test.core
    testImplementation gleanLibs.test.junit.ext
    testImplementation gleanLibs.test.work

    androidTestImplementation gleanLibs.test.espresso.core
    androidTestImplementation gleanLibs.test.runner
}
